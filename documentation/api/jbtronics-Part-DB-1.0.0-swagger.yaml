swagger: '2.0'
info:
  description: A API for the part managment tool Part-DB
  version: 1.0.0
  title: Part-DB API
  # put the contact info for your development or API team
  contact:
    name: Part-DB
    url: https://github.com/jbtronics/Part-DB

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: Part
  description: Part operations
- name: Category
  description: Category operations
- name: Storelocation
  description: Storelocation operations
- name: System
  description: System operations
- name: Footprint
  description: Footprint related operations
- name: Manufacturer
  description: Manufacturer related operations
- name: Supplier
  description: Supplier related operations
- name: TreeView
  description: Functions that generates a TreeView
- name: Attachements
  description: Attachement related operations

paths:
  /system/info:
    get:
      tags:
      - System
      summary: Get informations about the system
      description: |
        Gets different informations like the version of Part-DB.
      produces:
      - "application/json"
      responses:
        "200":
          description: Informations about the system
          schema:
            $ref: '#/definitions/SystemInfo'
              
  /parts:
    get:
      tags:
        - Part
      summary: Gets all available parts
      produces:
        - application/json
      responses:
        200:
          description: "Request was successful"
          schema:
            type: array
            items:
              $ref: '#/definitions/Part'
        500:
          description: "An exception was thrown."
          
  /parts/noprice:
    get:
      tags:
        - Part
      summary: Gets all parts, without a price.
      produces:
        - application/json
      responses:
        200:
          description: "Request was successful"
          schema:
            type: array
            items:
              $ref: '#/definitions/Part'
        500:
          description: "An exception was thrown."
          
  /parts/ordered:
    get:
      tags:
        - Part
      summary: Gets all parts, that should be ordered.
      produces:
        - application/json
      responses:
        200:
          description: "Request was successful"
          schema:
            type: array
            items:
              $ref: '#/definitions/Part'
        500:
          description: "An exception was thrown."     
          
  /parts/obsolete:
    get:
      tags:
        - Part
      summary: Gets all parts, that are obsolete.
      produces:
        - application/json
      responses:
        200:
          description: "Request was successful"
          schema:
            type: array
            items:
              $ref: '#/definitions/Part'
        500:
          description: "An exception was thrown."       
              
  /parts/by-location/{id}:
    get:
      tags:
        - Part
        - Storelocation
      summary: Gets all parts in the Storelocation with the given id.
      produces:
        - application/json
      parameters: 
        - name: "id"
          in: "path"
          description: "The id of the location, from which all parts should be listed."
          required: true
          type: number
          format: uint64
        - name: "recursive"
          in: "query"
          description: "If true, all parts of all child locations are included, too."
          type: boolean
          default: false
      responses:
        200:
          description: "Request was successful"
          schema:
            type: array
            items:
              $ref: '#/definitions/Part'
        400:
          description: "The id must be greater 0."
        500:
          description: "An exception was thrown."
          
  /parts/by-category/{id}:
    get:
      tags:
        - Part
        - Category
      summary: Gets all parts in the Category with the given id.
      produces:
        - application/json
      parameters: 
        - name: "id"
          in: "path"
          description: "The id of the category, from which all parts should be listed."
          required: true
          type: number
          format: uint64
        - name: "recursive"
          in: "query"
          description: "If true, all parts of all child categores are included, too."
          type: boolean
          default: false
      responses:
        200:
          description: "Request was successful"
          schema:
            type: array
            items:
              $ref: '#/definitions/Part'
        400:
          description: "The id must be greater 0."
        500:
          description: "An exception was thrown."
          
  /parts/by-footprint/{id}:
    get:
      tags:
        - Part
        - Footprint
      summary: Gets all parts with the Footprint with the given id.
      produces:
        - application/json
      parameters: 
        - name: "id"
          in: "path"
          description: "The id of the footprint, from which all parts should be listed."
          required: true
          type: number
          format: uint64
        - name: "recursive"
          in: "query"
          description: "If true, all parts of all child footprint are included, too."
          type: boolean
          default: false
      responses:
        200:
          description: "Request was successful"
          schema:
            type: array
            items:
              $ref: '#/definitions/Part'
        400:
          description: "The id must be greater 0."
        500:
          description: "An exception was thrown."
          
  /parts/by-manufacturer/{id}:
    get:
      tags:
        - Part
        - Manufacturer
      summary: Gets all parts in the Manufacturer with the given id.
      produces:
        - application/json
      parameters: 
        - name: "id"
          in: "path"
          description: "The id of the manufacturer, from which all parts should be listed."
          required: true
          type: number
          format: uint64
        - name: "recursive"
          in: "query"
          description: "If true, all parts of all child manufacturer are included, too."
          type: boolean
          default: false
      responses:
        200:
          description: "Request was successful"
          schema:
            type: array
            items:
              $ref: '#/definitions/Part'
        400:
          description: "The id must be greater 0."
        500:
          description: "An exception was thrown."
  
  /parts/by-supplier/{id}:
    get:
      tags:
        - Part
        - Supplier
      summary: Gets all parts in the Supplier with the given id.
      produces:
        - application/json
      parameters: 
        - name: "id"
          in: "path"
          description: "The id of the supplier, from which all parts should be listed."
          required: true
          type: number
          format: uint64
        - name: "recursive"
          in: "query"
          description: "If true, all parts of all child suppliers are included, too."
          type: boolean
          default: false
      responses:
        200:
          description: "Request was successful"
          schema:
            type: array
            items:
              $ref: '#/definitions/Part'
        400:
          description: "The id must be greater 0."
        500:
          description: "An exception was thrown."
          
  /parts/by-keyword/{keyword}:
    get:
      tags:
        - Part
      summary: Search parts which contains the keyword.
      produces:
        - application/json
      parameters: 
        - name: "keyword"
          in: "path"
          description: "The keyword for which should be filtered."
          required: true
          example: "BC"
          type: string
        - name: "groupby"
          in: "query"
          description: "Parts can be grouped by none 'categories', 'footprints', 'storelocations' and 'manufacturers'"
          type: string
          default: ""
        - name: "name"
          in: "query"
          description: "If true, then the search includes the name field of a part."
          type: boolean
          default: true
        - name: "description"
          in: "query"
          description: "If true, then the search includes the description field of a part."
          type: boolean
          default: true
        - name: "comment"
          in: "query"
          description: "If true, then the search includes the comment field of a part."
          type: boolean
          default: false
        - name: "footprint"
          in: "query"
          description: "If true, then the search includes the footprint name of a part."
          type: boolean
          default: false
        - name: "category"
          in: "query"
          description: "If true, then the search includes the category name of a part."
          type: boolean
          default: false
        - name: "location"
          in: "query"
          description: "If true, then the search includes the name field of a part."
          type: boolean
          default: false
        - name: "supplier"
          in: "query"
          description: "If true, then the search includes the supplier name of a part."
          type: boolean
          default: false
        - name: "partnr"
          in: "query"
          description: "If true, then the search includes the order part number of a part."
          type: boolean
          default: false
        - name: "manufacturer"
          in: "query"
          description: "If true, then the search includes the manufacturer name of a part."
          type: boolean
          default: false
      responses:
        200:
          description: "Request was successful"
          schema:
            type: array
            items:
              $ref: '#/definitions/Part'
        400:
          description: "The id must be greater 0."
        500:
          description: "An exception was thrown."
          
  /parts/by-regex/{regex}:
    get:
      tags:
        - Part
      summary: Search parts which matches the regular expression.
      produces:
        - application/json
      parameters: 
        - name: "regex"
          in: "path"
          description: "The keyword for which should be filtered."
          required: true
          example: "BC[1-3]+"
          type: string
        - name: "groupby"
          in: "query"
          description: "Parts can be grouped by none 'categories', 'footprints', 'storelocations' and 'manufacturers'"
          type: string
          default: ""
        - name: "name"
          in: "query"
          description: "If true, then the search includes the name field of a part."
          type: boolean
          default: true
        - name: "description"
          in: "query"
          description: "If true, then the search includes the description field of a part."
          type: boolean
          default: true
        - name: "comment"
          in: "query"
          description: "If true, then the search includes the comment field of a part."
          type: boolean
          default: false
        - name: "footprint"
          in: "query"
          description: "If true, then the search includes the footprint name of a part."
          type: boolean
          default: false
        - name: "category"
          in: "query"
          description: "If true, then the search includes the category name of a part."
          type: boolean
          default: false
        - name: "location"
          in: "query"
          description: "If true, then the search includes the name field of a part."
          type: boolean
          default: false
        - name: "supplier"
          in: "query"
          description: "If true, then the search includes the supplier name of a part."
          type: boolean
          default: false
        - name: "partnr"
          in: "query"
          description: "If true, then the search includes the order part number of a part."
          type: boolean
          default: false
        - name: "manufacturer"
          in: "query"
          description: "If true, then the search includes the manufacturer name of a part."
          type: boolean
          default: false
      responses:
        200:
          description: "Request was successful"
          schema:
            type: array
            items:
              $ref: '#/definitions/Part'
        400:
          description: "The id must be greater 0."
        500:
          description: "An exception was thrown."
  
  /parts/{pid}:
    get:
      tags:
        - Part
      summary: Gets all informations about the part with the given id
      produces:
        - application/json
      parameters: 
        - name: "pid"
          in: "path"
          description: "The id of the part which is requested"
          required: true
          type: number
          format: uint64
      responses:
        200:
          description: "Request was successful"
          schema:
            $ref: '#/definitions/Part'
        400:
          description: "The id must be greater 0."
        500:
          description: "An exception was thrown."
            
    delete:
      tags:
        - Part
      summary: Delets the given part
      produces:
         - application/json
      parameters:
        - name: "pid"
          in: "path"
          description: "The id of the part which is requested"
          required: true
          type: number
          format: uint64
      responses:
        200:
          description: "Part was successful deleted."
        404:
          description: "No part with the given id, were found"
          
    post:
      tags:
        - Part
      summary: Edits the values of the part.
      produces: 
        - application/json
      parameters: 
        - name: "pid"
          in: "path"
          description: "The id of the part which is requested"
          required: true
          type: number
          format: uint64
        - name : "new_vals"
          description: "The new data of the part. Only the values which should be changed"
          in: body
          schema:
            $ref: '#/definitions/Part'
      responses:
        200:
          description: "Part was successful edited."
        404:
          description: "No part with the given id, were found."
            
      
  /categories/{id}:
    get:
      tags:
        - Category
      summary: Gets all information about the category with the given id
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "The id of the category requested."
          required: true
          type: number
          format: uint64
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
        400:
          description: "ID must be greater 0!"
        500:
          description: "An exception were thrown!"
            
  /locations/{id}:
    get:
      tags:
        - Storelocation
      summary: "Gets all information about the location with the given id"
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "The id of the location requested."
          required: true
          type: number
          format: uint64
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/StoreLocation'
        400:
          description: "ID must be greater 0!"
        500:
          description: "An exception were thrown!"
  
  /manufacturers/{id}:
    get:
      tags:
        - Manufacturer
      summary: "Gets all information about the manufacturer with the given id"
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "The id of the location requested."
          required: true
          type: number
          format: uint64
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Company'
        400:
          description: "ID must be greater 0!"
        500:
          description: "An exception were thrown!"        
          
  /suppliers/{id}:
    get:
      tags:
        - Supplier
      summary: "Gets all information about the supplier with the given id"
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "The id of the supplier requested."
          required: true
          type: number
          format: uint64
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Company'
        400:
          description: "ID must be greater 0!"
        500:
          description: "An exception were thrown!"        
          
  /attachementtypes/{id}:
    get:
      tags:
        - Attachements
      summary: "Gets all information about the attachement type with the given id"
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "The id of the attachementtype requested."
          required: true
          type: number
          format: uint64
      responses:
        200:
          description: Request was successful.
          schema:
            $ref: '#/definitions/AttachementType'
        400:
          description: "ID must be greater 0!"
        500:
          description: "An exception were thrown!"
  
  /footprints/{id}:
    get:
      tags:
        - Footprint
      summary: "Gets all information about the footprint with the given id"
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "The id of the footprint requested."
          required: true
          type: number
          format: uint64
      responses:
        200:
          description: Request was successful
          schema:
            $ref: '#/definitions/Footprint'
        400:
          description: "ID must be greater 0!"
        500:
          description: "An exception were thrown!"        
  
definitions:
  SystemInfo:
    type: object
    required: 
    - version
    properties:
      version:
        type: string
        example: "V4.0 RC1"
      gitBranch:
        type: string
        example: "nextgen"
      gitCommit:
        type: string
        example: "fe1d67d"
        
  Part:
    type: object
    required: 
    - id
    properties:
      id:
        description: The id which identifies the part.
        type: number
        example: 10
      name:
        description: The name of the part.
        type: string
        example: "BC547"
      description:
        description: "The description of the part, with BBCode parsing"
        type: string
        example: "<b>NPN</b> Transistor"
      description_raw:
        description: "The description of the part, without BBCode parsing"
        type: string
        example: "[b]NPN[/b] Transistor"
      comment:
        description: "The comment of the part, with BBCode parsing."
        type: string
        example: "<i>Good</i> for NF."
      comment_raw:
        description: "The comment of the part, without BBCode parsing."
        type: string
        example: "[i]Good[/i] for NF."
      instock:
        description: The number of parts, which are currently in stock.
        type: number
        example: 3
      mininstock:
        type: number
        example: 3
      category:
        $ref: '#/definitions/Category'
      obsolete:
        description: "Check if the part is obsolete in all Suppliers"
        type: boolean
        example: true
      visible:
        description: "Check if the part is visible"
        type: boolean
        example: true
      orderdetails:
        type: array
        items:
          $ref: '#/definitions/OrderDetails'
      orderquantity:
        description: "The amount of parts, which should be ordered."
        type: number
        example: 0
      minorderquantity:
        description: "The minimum quantity, which should be ordered."
        type: number
        example: 10
      manualorder:
        description: "True, if the part were marked manually for ordering."
        type: boolean
        example: true
      lastmodified:
        description: "The datetime, when the part was last modified."
        type: string
        example: "2017-08-14 18:10:28"
      datetime_added:
        description: "The datetime, when the part was created."
        type: string
        example: "2015-05-17 11:45:06"
      footprint:
        $ref: '#/definitions/Footprint'
      storelocation:
        $ref: '#/definitions/StoreLocation'
      manufacturer:
        $ref: '#/definitions/Company'
      avgprice:
        description: "Returns the average price."
        type: number
        example: 3.2
      properties:
        type: array
        items:
          $ref: '#/definitions/PartProperty'
        
      
  Category:
    type: object
    required:
      - id
    properties:
      id:
        description: "The id of the category."
        type: number
        example: 23
      name:
        description: "The Name of the category."
        type: number
        example: "NPN"
      fullpath:
        description: "The Fullpath to the category."
        type: string
        example: "Transistors/NPN"
      parentid:
        description: The id of the parent category.
        type: number
        example: 3
      level:
        description: "A number describing the level in the hierachy"
        type: number
        example: 2
      disable_footprints:
        description: "True, if footprints should be disabled for this category."
        type: boolean
        example: false
      disable_manufacturers:
        description: "True, if manufacturers should be disabled for this category."
        type: boolean
        example: true
      disable_autodatasheets:
        description: "True, if automatic autodatasheets should be disabled for this category."
        type: boolean
        example: false
      disable_properties:
        description: "True if automatic properties should be disabled."
        type: boolean
        example: false
      default_description:
        description: "The default desription for parts with this category."
        type: string
        example: "Test: ??"
      default_comment:
        description: "The default comment for part with this category."
        type: string
        example: "Test: ??"
  
  Attachement:
    type: object
    required:
      - id
    properties:
      id:
        description: "The id of the attachement."
        type: number
        example: 4
      name:
        description: "The name of the attachement."
        type: string
        example: "Attachement 1"
      isPicture:
        description: "True, if the Attachement has a picture extension."
        type: boolean
        example: true
      filename:
        description: "The filename of the attachement."
        type: string
        example: 
      showInTable:
        description: "True, if the attachement should be shown in the part tables."
        type: string
        example: "/data/bc547.pdf"
      "type":
        $ref: '#/definitions/AttachementType'
          
  AttachementType:
    type: object
    required:
      - id
    properties:
      id:
        description: "The id of the attachementtype."
        type: number
        example: 5
      name:
        description: "The name of the attachementtype"
        type: string
        example: "Pictures"
      fullpath:
        description: "The fullpath to the attachementtypes"
        type: string
        example: "Images / Pictures"
      parentid:
        description: "The id of the parent attachementtype"
        type: number
        example: 2
      level:
        description: "A number describing the level in the hierachy"
        type: number
        example: 2
  
  Company:
    type: object
    required:
      - id
    properties:
      id:
        description: "The id of the Company"
        type: number
        example: 5
      name:
        description: "The name of the Company"
        type: string
        example: "ACME Inc."
      fullpath:
        description: "The fullpath to the Company"
        type: string
        example: "Mother Inc. / ACME Inc."
      parentid:
        description: "The id of the parent company"
        type: number
        example: 2
      level:
        description: "A number describing the level in the hierachy"
        type: number
        example: 2
      address:
        description: "The address of the company"
        type: string
        example: "Example Street 4, 12345 Sampletown"
      phone_number:
        description: "The phone number of the company"
        type: string
        example: "(0123) 45678)"
      fax_number:
        description: "The fax number of the company"
        type: string
        example: "(0123) 45678)"
      website:
        description: "The website of the company"
        type: string
        example: "www.foo.bar"
      auto_url:
        description: "A url with the filed %PARTNR%, which can be used to generate a link to the part on the company website"
        type: string
        example: "www.foo.bar/%PARTNR%"
      
  OrderDetails:
    type: object
    required:
      - id
    properties:
      id:
        description: "The id of the OrderDetail"
        type: number
        example: 45
      supplier:
        $ref: '#/definitions/Company'
      supplierpartnr:
        description: "The Code, which identifies the part for the supplier."
        type: string
        example: "BC 547B"
      obsolete:
        description: "True, if the part is obsolete, which means it is no longer available"
        type: boolean
        example: false
      supplier_product_url:
        description: "The link to the website of the article on the suppliers website."
        type: string
        example: "https://foo.bar/BC547"
      pricedetails:
        type: array
        items:
          $ref: '#/definitions/PriceDetails'
  
  PriceDetails:
    type: object
    required: 
      - id
    properties:
      id:
        description: "The id of the PriceDetail"
        type: number
        example: 23
      quantity:
        description: "The related quantity for the PriceDetail"
        type: number
        example: 1
      price:
        description: "The price for this quantity as a float"
        type: number
        example: 0.27
      minDiscountQuantity:
        description: "Minimum discount quantity means the minimum order quantity for which the price of this orderdetails is valid."
        type: number
        example: 10
  
  StoreLocation:
    type: object
    required: 
      - id
    properties:
      id:
        description: "The id of the storelocation."
        type: number
        example: 4
      name:
        description: "The name of the storelocation."
        type: number
        example: "Location I-B4"
      fullpath:
        description: "The full path to the category."
        type: string
        example: "Location I / Location I-B4"
      parentid:
        description: "The id of the Parent storelocation"
        type: number
        example: 1
      level:
        description: "A number describing the level in the hierachy"
        type: number
        example: 2
        
  PartProperty:
    type: object
    required: 
      - name
      - value
    properties:
      name:
        description: "The name field of the property, without a delimiter."
        type: string
        example: "max. Voltage"
      value:
        description: "The value field of the property."
        type: string
        example: "45V"
  
  Footprint:
    type: object
    required:
      - id
    properties:
      id:
        description: "The id of the footprint"
        type: string
        example: "DIP8"
      name:
        description: "The name of the footprint."
        type: string
        example: "DIP8"
      fullpath:
        description: "The fullpath to the footprint"
        type: string
        example: "DIP / DIP8"
      parentid:
        description: "The id of the parent"
        type: number
        example: 10
      level:
        description: "A number describing the level in the hierachy"
        type: number
        example: 2
      filename:
        description: "Get the filename of the picture (absolute path from Part-DB root)"
        type: string
        example: "/img/DIP8.png"
      filename_valid:
        description: "Check if the filename is valid (picture exists)"
        type: boolean
        example: true
      filename3D:
        description: "Get the filename of the model (absolute path from Part-DB root)"
        type: string
        example: "/models/model.x3d"
      filename3D_valid:
        description: "Check if the filename is valid (model exists)."
        type: boolean
        example: true
        
# Added by API Auto Mocking Plugin
host: localhost
basePath: /Part-DB/api.php/1.0.0
schemes:
  - http